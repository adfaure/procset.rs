var searchIndex = {};
searchIndex["interval_set"] = {"doc":"This is documentation for the `procset` crate.","items":[[0,"interval_set","interval_set","",null,null],[3,"Interval","interval_set::interval_set","Struct `Interval` containing two values representing the limit of the interval.",null,null],[3,"IntervalSet","","Struct `IntervalSet` representing a set of sorted not overllaping intervals.\nBe aware that the validity of the interval set is not checked.",null,null],[3,"IntervalSetIterator","","Struct to iterate through an `IntervalSet`",null,null],[8,"ToIntervalSet","","Trait `ToIntervalSet` allows to write a function to convert type into an IntervalSet.",null,null],[10,"to_interval_set","","Consume `self` to create an IntervalSet",0,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"cmp","","",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"next","","",3,null],[11,"new","","",1,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"interval"}}],[11,"whole","","Return the maximum interval possible (with u32 var)",1,{"inputs":[],"output":{"name":"interval"}}],[11,"range_size","","Because the trait Order is needed to sort the IntervalSet I dont what to change the\nnative order. This function coud be considered as the `len` of the interval.",1,null],[11,"as_tuple","","Simply return an equivalent interval as tuple.",1,null],[11,"get_inf","","I am not sure about those two function, maybe set the field as public could be a better\nidea...",1,null],[11,"get_sup","","",1,null],[11,"is_valid","","Utility function check if the interval is valid.",1,null],[11,"to_interval_set","","Convert a simple interval into an intervalset.\nNote that the validity of the interval is checked.",1,null],[11,"empty","","Function to create an empty interval set.",2,{"inputs":[],"output":{"name":"intervalset"}}],[11,"is_empty","","Return `true` if the interval is empty.",2,null],[11,"union","","Return the union of two intervals.",2,null],[11,"intersection","","Return the intersection of two intervals.",2,null],[11,"difference","","Return the difference between two intervals.",2,null],[11,"symetric_difference","","Return the symetric difference of two intervals.",2,null],[11,"max","","Return the greater interval from the set.\nNote that the function return a cloned interval, so I will be easier to manipulate.\nMoreover, in the case where many intervals have the same size,\nthe function will return the first element.\n# Example",2,null],[11,"size","","Return the size of the interval set. The sie is defined by the sum of the len of each\nintervals contained into the set.",2,null],[11,"iter","","Get an iterator over an IntervalSet",2,null],[11,"insert","","",2,null],[11,"fmt","","",1,null],[11,"fmt","","",2,null]],"paths":[[8,"ToIntervalSet"],[3,"Interval"],[3,"IntervalSet"],[3,"IntervalSetIterator"]]};
initSearch(searchIndex);
